#!/usr/bin/env python2

import rospy
import tf
import tf2_ros
import threading
from tf import transformations
import tf_conversions
from geometry_msgs.msg import *
from gazebo_msgs.srv import *
import PyKDL

localization_error = Pose()

class Publisher:
	def __init__(self, link_name, frame_id, reference_frame):
		self.link_name = link_name
		self.frame_id = frame_id
		self.reference_frame = reference_frame

		self.service_name = '/gazebo/get_link_state'
		self.get_link_state = None
		self.broadcaster = tf2_ros.TransformBroadcaster()

	def spin(self):
		global localization_error
		while not rospy.is_shutdown():
			req = GetLinkStateRequest()
			req.link_name = self.link_name
			req.reference_frame = self.reference_frame
			if self.get_link_state is None:
				try:
					rospy.wait_for_service(self.service_name, 10.0)
					self.get_link_state = rospy.ServiceProxy(self.service_name, GetLinkState)
				except:
					continue

			try:
				res = self.get_link_state(req)
			except rospy.service.ServiceException as e:
				self.get_link_state = None
				print(e)
				continue

			if res.success == False:
				raise Exception(self.service_name)

			t = TransformStamped()
			t.header.stamp = rospy.Time.now()
			t.header.frame_id = self.reference_frame
			t.child_frame_id = self.frame_id
			correction_x = 0
			correction_y = 0
			correction_z = 0
			# if self.frame_id == "object":
			# 	correction_x = 0
			# 	correction_y = 0.05
			if self.frame_id == "szafka_above":
				correction_z = 0.4
				correction_x = -0.1
			t.transform.translation.x = res.link_state.pose.position.x + correction_x
			t.transform.translation.y = res.link_state.pose.position.y + correction_y
			t.transform.translation.z = res.link_state.pose.position.z + correction_z
			t.transform.rotation = res.link_state.pose.orientation
			thing_kdl = tf_conversions.posemath.fromTf([[t.transform.translation.x, t.transform.translation.y, t.transform.translation.z], [t.transform.rotation.x,t.transform.rotation.y,t.transform.rotation.z,t.transform.rotation.w]]) 
			thing_noerror = thing_kdl  * PyKDL.Frame(tf_conversions.posemath.fromMsg(localization_error).M, PyKDL.Vector(tf_conversions.posemath.fromMsg(localization_error).p.x(), tf_conversions.posemath.fromMsg(localization_error).p.y(), tf_conversions.posemath.fromMsg(localization_error).p.z())) 
			self.broadcaster.sendTransform(t)
			
			req = GetLinkStateRequest()
			req.link_name = self.link_name
			req.reference_frame = 'torso_base'
			if self.get_link_state is None:
				try:
					rospy.wait_for_service(self.service_name, 10.0)
					self.get_link_state = rospy.ServiceProxy(self.service_name, GetLinkState)
				except:
					continue

			try:
				res = self.get_link_state(req)
			except rospy.service.ServiceException as e:
				self.get_link_state = None
				print(e)
				continue

			if res.success == False:
				raise Exception(self.service_name)

			t = TransformStamped()
			t.header.stamp = rospy.Time.now()
			t.header.frame_id = 'torso_base'
			t.child_frame_id = self.frame_id+"_corrected"
			correction_x = 0
			correction_y = 0
			correction_z = 0
			# if self.frame_id == "object":
			# 	correction_x = 0
			# 	correction_y = 0.05
			if self.frame_id == "szafka_above":
				correction_z = 0.4
				correction_x = -0.1
			t.transform.translation.x = res.link_state.pose.position.x + correction_x
			t.transform.translation.y = res.link_state.pose.position.y + correction_y
			t.transform.translation.z = res.link_state.pose.position.z + correction_z
			t.transform.rotation = res.link_state.pose.orientation
			thing_kdl = tf_conversions.posemath.fromTf([[t.transform.translation.x, t.transform.translation.y, t.transform.translation.z], [t.transform.rotation.x,t.transform.rotation.y,t.transform.rotation.z,t.transform.rotation.w]]) 
			thing_noerror = thing_kdl  * PyKDL.Frame(tf_conversions.posemath.fromMsg(localization_error).M, PyKDL.Vector(tf_conversions.posemath.fromMsg(localization_error).p.x(), tf_conversions.posemath.fromMsg(localization_error).p.y(), tf_conversions.posemath.fromMsg(localization_error).p.z())) 
			self.broadcaster.sendTransform(t)

			# thing_noerror_pose = tf_conversions.posemath.toMsg(thing_noerror)
			# t.transform.translation = thing_noerror_pose.position
			# t.transform.rotation = thing_noerror_pose.orientation
			# t.child_frame_id = self.frame_id+"_corrected"
			# self.broadcaster.sendTransform(t)

			try:
				rospy.sleep(0.1)
			except:
				break

def thread_fun(link_name, frame_id, reference_frame):
	publisher = Publisher(link_name, frame_id, reference_frame)
	publisher.spin()
def thread_error_calculation():
	global localization_error
	service_name = '/gazebo/get_link_state'
	get_link_state = None
	tfBuffer = tf2_ros.Buffer()
	listener = tf2_ros.TransformListener(tfBuffer)
	link_name='velma::torso_base'
	tf_name='torso_base'
	reference_frame='map'
	rate = rospy.Rate(10)
	gazebo_tf = TransformStamped()
	broadcaster = tf2_ros.TransformBroadcaster()
	while not rospy.is_shutdown():
		req = GetLinkStateRequest()
		req.link_name = link_name
		req.reference_frame = reference_frame
		if get_link_state is None:
			try:
				rospy.wait_for_service(service_name, 10.0)
				get_link_state = rospy.ServiceProxy(service_name, GetLinkState)
			except:
				continue
		try:
			res = get_link_state(req)
		except rospy.service.ServiceException as e:
			get_link_state = None
			print(e)
			continue
		if res.success == False:
			raise Exception(service_name)
		gazebo_tf.transform.translation = res.link_state.pose.position
		gazebo_tf.transform.rotation = res.link_state.pose.orientation
		try:
			trans = tfBuffer.lookup_transform(tf_name, reference_frame, rospy.Time(),rospy.Duration(10.0))
		except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
			rate.sleep()
			continue
		q1_inv =[0]*4
		q1_inv[0] = gazebo_tf.transform.rotation.x
		q1_inv[1] = gazebo_tf.transform.rotation.y
		q1_inv[2] = gazebo_tf.transform.rotation.z
		q1_inv[3] = -gazebo_tf.transform.rotation.w # Negate for inverse
		q2 =[0]*4
		q2[0] = trans.transform.rotation.x
		q2[1] = trans.transform.rotation.y
		q2[2] = trans.transform.rotation.z
		q2[3] = trans.transform.rotation.w
		inv_gazebo_frame = PyKDL.Frame(PyKDL.Rotation.Quaternion(q1_inv[0],q1_inv[1],q1_inv[2],q1_inv[3]), PyKDL.Vector(gazebo_tf.transform.translation.x, gazebo_tf.transform.translation.y, gazebo_tf.transform.translation.z))
		rviz_frame = PyKDL.Frame(PyKDL.Rotation.Quaternion(q2[0],q2[1],q2[2],q2[3]), PyKDL.Vector(trans.transform.translation.x, trans.transform.translation.y, trans.transform.translation.z))
		localization_error_kdl = rviz_frame * inv_gazebo_frame
		localization_error = tf_conversions.posemath.toMsg(localization_error_kdl)
		print "localization_error p: ", localization_error_kdl.p
		print "localization_error RPY: ", localization_error_kdl.M.GetRPY()
		gazebo_tf.header.stamp = rospy.Time.now()
		gazebo_tf.header.frame_id = 'map'
		gazebo_tf.child_frame_id = 'torso_gazebo'
		broadcaster.sendTransform(gazebo_tf)
		rate.sleep()

if __name__ == "__main__":
	rospy.init_node("object_marker", anonymous=True)

	tableThread = threading.Thread(target=thread_fun, args=("cafe_table::link", "stolik", "map"))
	cabinetDoorThread = threading.Thread(target=thread_fun, args=("cabinet_door::right_door", "szafka", "map"))
	cabinetThread = threading.Thread(target=thread_fun, args=("cabinet_door::cabinet", "szafka_above", "map"))
	objectThread = threading.Thread(target=thread_fun, args=("beer::link", "object", "map"))
	errorThread = threading.Thread(target=thread_error_calculation)

	tableThread.start()
	cabinetThread.start()
	objectThread.start()
	cabinetDoorThread.start()
	errorThread.start()
	print("Publishing position of test objects")
	rospy.spin()